button {
    display: block;
    background: #58a;
    color: #fff;
    border-radius: 50%;
    border: 0;
    padding: 0;
    margin-top: 30px;
    width: 2rem;
    height: 2rem;
    cursor: pointer;
    box-shadow: 0 0 0 1px rgba(0, 0, 0, .3) inset, 0 .1em .2em -.05em rgba(0, 0, 0, .5);
    position: relative;
    &:before {
        /* extend the clickable area */
        content: '';
        position: absolute;
        top: -10px;
        right: -10px;
        bottom: -10px;
        left: -10px;
    }
}

input[type="checkbox"] {
    position: absolute;
    clip: rect(0, 0, 0, 0);
}

.custom-checkbox,
.toggle {
    margin-top: 30px;
}

.custom-checkbox input[type="checkbox"] {
    &+label:before {
        content: '\a0'; // no break space
        display: inline-block;
        vertical-align: .1em;
        width: .8em;
        height: .8em;
        margin-right: .2em;
        border-radius: .2em;
        background: silver;
        text-indent: .15em;
        line-height: .65;
    }
    &:checked+label:before {
        content: '\2713';
        background: yellowgreen;
    }
    &:focus+label:before {
        box-shadow: 0 0 .1em .1em #58a;
    }
    &:disabled+label:before {
        background: gray;
        box-shadow: none;
        color: #555;
    }
}

.toggle input[type="checkbox"] {
    &+label {
        display: inline-block;
        padding: .3em .5em;
        background: #ccc;
        background-image: linear-gradient(#ddd, #bbb);
        border: 1px solid rgba(0, 0, 0, .2);
        border-radius: .3em;
        box-shadow: 0 1px white inset;
        text-align: center;
        text-shadow: 0 1px 1px white;
    }
    &:checked+label,
    &:active+label {
        box-shadow: .05em .1em .2em rgba(0, 0, 0, .6) inset;
        border-color: rgba(0, 0, 0, .3);
        background: #bbb;
    }
}

.overlay {
    /* vmax = vw/vh , whichever is larger */
    /* 50vmax on each side */
    /* limitation:
        + see the boundary of the overlay when scrolling unless the element has position: fixed or the page is not long enough for scrolling
        + cannot prevent users using the mouse to interact with the rest of the pages
    */
    box-shadow: 0 0 0 50vmax rgba(0, 0, 0, .8);
}

main.de-emphasized {
    // dimming using contrast & brightness does not provide a fallback. Use box-shadow above instead
    filter: blur(3px) contrast(.8) brightness(.8);
}

main {
    transition: .6 filter;
}

dialog.visible {
    display: initial;
    position: absolute;
    top: 70%;
}

ul {
    overflow: auto;
    width: 10em;
    height: 8em;
    padding: .3em .5em;
    border: 1px solid silver;
    /* 
        the linear-gradient acts as a mask that covers the radial-gradient when scrolling to the top &
        shows the radial-gradient when scrolling down
    */
    background: linear-gradient(white, rgba(255, 255, 255, 0)) 0 0 / 100% 50px, radial-gradient(at top, rgba(0, 0, 0, .2), transparent 70%) 0 0 / 100% 15px, linear-gradient(to top, white, rgba(255, 255, 255, 0)) bottom / 100% 50px, radial-gradient(at bottom, rgba(0, 0, 0, .2), transparent 70%) bottom / 100% 15px;
    background-repeat: no-repeat;
    background-attachment: local, scroll, local, scroll; // local: applied at the top, scroll: applied when scrolling
}

/* limitations: refer to page 254 for solution */
.image-slider {
    position: relative;
    display: inline-block; // before image
    &>div {
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        width: 50%; // initial width
        overflow: hidden;
        resize: horizontal; // can be vertical. this is disabled by default.
        max-width: 100%; // ensure the before image cannot be dragged outside the container
        /* overlay on top of the resize handler at the bottom right corner of before image */
        &:before {
            content: '';
            position: absolute;
            bottom: 0;
            right: 0;
            width: 12px;
            height: 12px;
            cursor: ew-resize;
            /* display the triangle as the resize handler */
            padding: 6px;
            background: linear-gradient(-45deg, white 50%, transparent 0);
            background-clip: content-box;
        }
    }
    img {
        display: block;
        user-select: none; // prevent the images being pointlessly selected when failing to grab the resize handler
    }
}